const tasks = {
  twoSum, // easy
  removeDuplicates, // easy
};

/**
@TODO
  простой поиск суммы двух чисел, можно решить перебором и сравнить каждый елемент
  массива с каждым, пока не будет получено искомое число

  и второй способ - можно сохранять каждое число в обьект и при вычислении смотреть, есть ли diff
  сохарненным - !смысл в том, что одно из чисел в массиве автоматически является разницей вычитания между
 [ target - nums[n] ] === nums[n - 1], а мы сохраняем каждый елемент массива!
*/
const twoSum = function (nums = [], target = 0) {
  const map = {};

  for (let i = 0; i < nums.length; i++) {
    const diff = target - nums[i];

    if (typeof map[diff] !== "undefined") {
      return [map[diff], i];
    }

    map[nums[i]] = i;
  }
};
// twoSum([2, 11, 15, 7], 9) === [2, 3];

/**
@TODO
  простой поиск проход по массиву и сложность заключается с проведении перестановки
  необходимо переставлять не i<=>i+1
  а нужно перезаписать nums[left] на число без повтора, и некст число оставить без изменения
  что бы оно попало верно под условия неравенства i!==i+1

  left - переменная, которая записывает кол-во перезаписей (в итоге это длина уникального массива)
*/
const removeDuplicates = function (nums = []) {
  let left = 0;

  for (let i = 0; i < nums.length - 1; i++) {
    if (nums[i] !== nums[i + 1]) {
      left++;
      nums[left] = nums[i + 1];
    }
  }

  return left + 1;
};
// removeDuplicates([1,1,2]) === 2, nums = [1,2,1];
